{"version":3,"sources":["../../src/repository/AppExerciseRepository.js"],"names":["repository","getAllAppExercises","appExList","sqlGetAllAppExercises","clt","query","result","exists","j","k","i","rows","length","id_app_exercise","map","row","push","AppExercise","exercise_name","class","muscleList","Muscle","id_muscle","muscle_name","console","error","getDetailAppExercise","body","appEx","equipmentList","Newsql","log","muscle","filter","id","resultEquipment","rowCount","equipment","id_equipment","Equipment","name","getAppExercisesByIdMuscle","req","sql","params","getAppExercisesByIdEquipment"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,aAAa,EAAnB;;AAEAA,WAAWC,kBAAX,2DAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,mBAD0B,GACd,EADc;AAE1BC,+BAF0B;AAAA;AAAA;AAAA,iBAUTC,mBAAIC,KAAJ,CAAUF,qBAAV,CAVS;;AAAA;AAUxBG,gBAVwB;;AAW5B;AACIC,gBAZwB,GAYf,KAZe;AAaxBC,WAbwB,GAapB,CAboB;AAcxBC,WAdwB,GAcpB,CAAC,CAdmB;AAe5B;AACA;AACA;;AACA,eACMC,CADN,GACU,CADV,EAEEA,KAAKJ,OAAOK,IAAP,CAAYL,OAAOK,IAAP,CAAYC,MAAZ,GAAqB,CAAjC,EAAoCC,eAF3C,EAGEH,GAHF,EAIE;AACA;AACAJ,mBAAOK,IAAP,CAAYG,GAAZ,CAAgB,UAACC,GAAD,EAAS;AACvB,kBAAIL,MAAMK,IAAIF,eAAd,EAA+B;AAC7B,oBAAI,CAACN,MAAL,EAAa;AACXL,4BAAUc,IAAV,CACE,IAAIC,qBAAJ,CAAgBF,IAAIF,eAApB,EAAqCE,IAAIG,aAAzC,EAAwD,EAAxD,EAA4D,EAA5D,CADF;AAGAX,2BAAS,IAAT;AACAE;AACD;AACD;AACAQ,sCAAYE,KAAZ,CAAkBjB,UAAUO,CAAV,CAAlB,EAAgCW,UAAhC,CAA2CJ,IAA3C,CACE,IAAIK,gBAAJ,CAAWN,IAAIO,SAAf,EAA0BP,IAAIQ,WAA9B,CADF;AAGA;AACAf;AACA;AACA;AACD;AACF,aAlBD;AAmBAD,qBAAS,KAAT;AACAC,gBAAI,CAAJ;AACA;AACD;AACD;AA/C4B,2CAgDrBN,SAhDqB;;AAAA;AAAA;AAAA;;AAkD5BsB,kBAAQC,KAAR;;AAlD4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;;AAsDAzB,WAAW0B,oBAAX;AAAA,sEAAkC,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BC,iBAD4B,GACpB,EADoB;AAE5BR,sBAF4B,GAEf,EAFe;AAG5BS,yBAH4B,GAGZ,EAHY;AAIhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACIC,kBAZ4B;AAAA;AAAA;AAAA,mBAoBX1B,mBAAIC,KAAJ,CAAUyB,MAAV,EAAkB,CAACH,KAAKd,eAAN,CAAlB,CApBW;;AAAA;AAoB1BP,kBApB0B;;AAqB9BkB,oBAAQO,GAAR,CAAYzB,OAAOK,IAAnB;AACAL,mBAAOK,IAAP,CAAYG,GAAZ,CAAgB,UAACC,GAAD,EAAS;AACvB,kBAAIiB,SAASZ,WAAWa,MAAX,CAAkB,UAACD,MAAD;AAAA,uBAAYA,OAAOE,EAAP,KAAcnB,IAAIO,SAA9B;AAAA,eAAlB,CAAb;AACA,kBAAIU,OAAOpB,MAAP,IAAiB,CAArB,EAAwB;AACtBQ,2BAAWJ,IAAX,CAAgB,IAAIK,gBAAJ,CAAWN,IAAIO,SAAf,EAA0BP,IAAIQ,WAA9B,CAAhB;AACD;AACF,aALD;AAtB8B;AAAA,mBA4BFnB,mBAAIC,KAAJ,4LAK1B,CAACsB,KAAKd,eAAN,CAL0B,CA5BE;;AAAA;AA4B1BsB,2BA5B0B;;;AAoC9B,gBAAIA,gBAAgBC,QAAhB,IAA4B,CAAhC,EAAmC;AACjCD,8BAAgBxB,IAAhB,CAAqBG,GAArB,CAAyB,UAACC,GAAD,EAAS;AAChC,oBAAIsB,YAAYR,cAAcI,MAAd,CACd,UAACI,SAAD;AAAA,yBAAeA,UAAUH,EAAV,KAAiBnB,IAAIuB,YAApC;AAAA,iBADc,CAAhB;AAGA,oBAAID,UAAUzB,MAAV,IAAoB,CAAxB,EAA2B;AACzBiB,gCAAcb,IAAd,CAAmB,IAAIuB,mBAAJ,CAAcxB,IAAIuB,YAAlB,EAAgCvB,IAAIyB,IAApC,CAAnB;AACD;AACF,eAPD;AAQD;;AAEDhB,oBAAQO,GAAR,CAAY,WAAZ,EAAyBF,aAAzB;AACAD,oBAAQ,IAAIX,qBAAJ,CACNX,OAAOK,IAAP,CAAY,CAAZ,EAAeE,eADT,EAENP,OAAOK,IAAP,CAAY,CAAZ,EAAeO,aAFT,EAGNE,UAHM,EAINS,aAJM,CAAR;AAMAL,oBAAQO,GAAR,CAAYH,KAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApF8B,8CAqFvBA,KArFuB;;AAAA;AAAA;AAAA;;AAuF9BJ,oBAAQC,KAAR;;AAvF8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAAA;AAAA;AAAA;AAAA;;AA2FAzB,WAAWyC,yBAAX;AAAA,sEAAuC,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjCC,eADiC,GAEnC,mKAFmC;AAAA;AAAA;AAAA,mBAIhBvC,mBAAIC,KAAJ,CAAUsC,GAAV,EAAe,CAACD,IAAIE,MAAJ,CAAWtB,SAAZ,CAAf,CAJgB;;AAAA;AAI/BhB,kBAJ+B;AAAA,8CAK5BA,OAAOK,IALqB;;AAAA;AAAA;AAAA;;AAOnCa,oBAAQC,KAAR;;AAPmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvC;;AAAA;AAAA;AAAA;AAAA;;AAWAzB,WAAW6C,4BAAX;AAAA,sEAA0C,kBAAOH,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpCC,eADoC,GAEtC,yKAFsC;AAAA;AAAA;AAAA,mBAInBvC,mBAAIC,KAAJ,CAAUsC,GAAV,EAAe,CAACD,IAAIE,MAAJ,CAAWN,YAAZ,CAAf,CAJmB;;AAAA;AAIlChC,kBAJkC;AAAA,8CAK/BA,OAAOK,IALwB;;AAAA;AAAA;AAAA;;AAOtCa,oBAAQC,KAAR;;AAPsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1C;;AAAA;AAAA;AAAA;AAAA;;kBAWezB,U","file":"AppExerciseRepository.js","sourcesContent":["import Muscle from \"../Models/Muscle\";\r\nimport AppExercise from \"../Models/AppExercise\";\r\nimport Equipment from \"../Models/Equipment\";\r\nimport clt from \"../core/config/database\";\r\n\r\nconst repository = {};\r\n\r\nrepository.getAllAppExercises = async () => {\r\n  var appExList = [];\r\n  let sqlGetAllAppExercises = `\r\n    SELECT ae.id_app_exercise, ae.name as exercise_name, mu.id_muscle, mu.name as muscle_name\r\n    FROM _app_exercise ae\r\n    JOIN _app_exercise_muscle ta ON ae.id_app_exercise = ta.id_app_exercise\r\n    JOIN _muscle mu ON ta.id_muscle = mu.id_muscle\r\n    ORDER BY id_app_exercise\r\n    `;\r\n  try {\r\n    var result = await clt.query(sqlGetAllAppExercises);\r\n    // console.log(result.rows)\r\n    var exists = false;\r\n    var j = 0;\r\n    var k = -1;\r\n    // console.log()\r\n    // console.log(\"ID du dernier élément : \" + result.rows[result.rows.length - 1].id_app_exercise)\r\n    // console.log()\r\n    for (\r\n      var i = 1;\r\n      i <= result.rows[result.rows.length - 1].id_app_exercise;\r\n      i++\r\n    ) {\r\n      // console.log(\"(i) Tour de boucle : \" + i)\r\n      result.rows.map((row) => {\r\n        if (i === row.id_app_exercise) {\r\n          if (!exists) {\r\n            appExList.push(\r\n              new AppExercise(row.id_app_exercise, row.exercise_name, [], [])\r\n            );\r\n            exists = true;\r\n            k++;\r\n          }\r\n          // console.log(\"Avant push muscle \", appExList[k])\r\n          AppExercise.class(appExList[k]).muscleList.push(\r\n            new Muscle(row.id_muscle, row.muscle_name)\r\n          );\r\n          // console.log(\"Après push muscle \", appExList[k])\r\n          j++;\r\n          // console.log(\"(j) Nb Muscle(s) ajouté(s) à cet AE : \" + j)\r\n          // console.log(\"(k) Indice dans appExList : \" + k)\r\n        }\r\n      });\r\n      exists = false;\r\n      j = 0;\r\n      // console.log()\r\n    }\r\n    // console.log(appExList)\r\n    return appExList;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nrepository.getDetailAppExercise = async (body) => {\r\n  let appEx = {};\r\n  let muscleList = [];\r\n  let equipmentList = [];\r\n  // let Oldsql = `\r\n  // SELECT ae.id_app_exercise, ae.name as exercise_name, mu.id_muscle, mu.name as muscle_name, eq.name as equipment_name, eq.id_equipment as id_equipment\r\n  // FROM _app_exercise ae JOIN _app_exercise_muscle ta ON ae.id_app_exercise = ta.id_app_exercise\r\n  // JOIN _muscle mu ON ta.id_muscle = mu.id_muscle\r\n  // JOIN _app_exercise_equipment aeeq ON ae.id_app_exercise = aeeq.id_app_exercise\r\n  // JOIN _equipment eq ON eq.id_equipment = aeeq.id_equipment\r\n  // WHERE ae.id_app_exercise = $1\r\n  // `\r\n  let Newsql = `\r\n    SELECT ae.id_app_exercise, ae.name as exercise_name, mu.id_muscle, mu.name as muscle_name\r\n    FROM _app_exercise ae \r\n    JOIN _app_exercise_muscle ta ON ae.id_app_exercise = ta.id_app_exercise\r\n    JOIN _muscle mu ON ta.id_muscle = mu.id_muscle\r\n    WHERE ae.id_app_exercise = $1\r\n    `;\r\n  try {\r\n    var result = await clt.query(Newsql, [body.id_app_exercise]);\r\n    console.log(result.rows);\r\n    result.rows.map((row) => {\r\n      let muscle = muscleList.filter((muscle) => muscle.id === row.id_muscle);\r\n      if (muscle.length == 0) {\r\n        muscleList.push(new Muscle(row.id_muscle, row.muscle_name));\r\n      }\r\n    });\r\n    var resultEquipment = await clt.query(\r\n      `SELECT eq.id_equipment, eq.name\r\n        FROM _equipment eq\r\n        JOIN _app_exercise_equipment aeeq ON eq.id_equipment  = aeeq.id_equipment\r\n        WHERE aeeq.id_app_exercise = $1`,\r\n      [body.id_app_exercise]\r\n    );\r\n\r\n    if (resultEquipment.rowCount != 0) {\r\n      resultEquipment.rows.map((row) => {\r\n        let equipment = equipmentList.filter(\r\n          (equipment) => equipment.id === row.id_equipment\r\n        );\r\n        if (equipment.length == 0) {\r\n          equipmentList.push(new Equipment(row.id_equipment, row.name));\r\n        }\r\n      });\r\n    }\r\n\r\n    console.log(\"Endboucle\", equipmentList);\r\n    appEx = new AppExercise(\r\n      result.rows[0].id_app_exercise,\r\n      result.rows[0].exercise_name,\r\n      muscleList,\r\n      equipmentList\r\n    );\r\n    console.log(appEx);\r\n    // var exists = false\r\n    // var j = 0\r\n    // var k = -1\r\n    // for (var i = 1; i <= result.rows[result.rows.length - 1].id_app_exercise; i++) {\r\n    //     result.rows.map((row) => {\r\n    //         if (i === row.id_app_exercise) {\r\n    //             if (!exists) {\r\n    //                 appExList.push(new AppExercise(row.id_app_exercise, row.exercise_name, [], []))\r\n    //                 exists = true\r\n    //                 k++\r\n    //             }\r\n    //             // console.log(\"Avant push muscle \", appExList[j])\r\n    //             var muscleExist = AppExercise.class(appExList[k]).muscleList.filter(muscle => muscle.id === row.id_muscle)\r\n    //             // console.log(muscleExist.length)\r\n    //             if (muscleExist.length === 0) {\r\n    //                 AppExercise.class(appExList[k]).muscleList.push(new Muscle(row.id_muscle, row.muscle_name))\r\n    //             }\r\n    //             var equipmentExist = AppExercise.class(appExList[k]).equipmentList.filter(equipment => equipment.id === row.id_equipment)\r\n    //             // console.log(equipmentExist.length)\r\n    //             if (equipmentExist.length === 0) {\r\n    //                 AppExercise.class(appExList[k]).equipmentList.push(new Equipment(row.id_equipment, row.equipment_name))\r\n    //             }\r\n    //             // console.log(\"Après push muscle \", appExList[j])\r\n    //             j++\r\n    //         }\r\n    //     })\r\n    //     exists = false\r\n    //     j = 0\r\n    // }\r\n    // return appExList;\r\n    return appEx;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nrepository.getAppExercisesByIdMuscle = async (req) => {\r\n  let sql =\r\n    \"SELECT ae.id_app_exercise as id, ae.name FROM _app_exercise ae JOIN _app_exercise_muscle aem ON ae.id_app_exercise = aem.id_app_exercise WHERE aem.id_muscle = $1\";\r\n  try {\r\n    let result = await clt.query(sql, [req.params.id_muscle]);\r\n    return result.rows;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nrepository.getAppExercisesByIdEquipment = async (req) => {\r\n  let sql =\r\n    \"SELECT ae.id_app_exercise as id, ae.name FROM _app_exercise ae JOIN _app_exercise_equipment aee ON ae.id_app_exercise = aee.id_app_exercise WHERE aee.id_equipment = $1\";\r\n  try {\r\n    let result = await clt.query(sql, [req.params.id_equipment]);\r\n    return result.rows;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport default repository;\r\n"]}