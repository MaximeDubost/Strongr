{"version":3,"sources":["../../src/repository/UserRepository.js"],"names":["repository","getUser","id_user","sqlGetUser","clt","query","result","rows","console","error","register","body","res","sqlExist","username","length","birth_to_datetime","Date","birthdate","sqlRegister","email","bcrypt","hashSync","password","firstname","lastname","phonenumber","checkEmail","sqlExistEmail","updateUser","sqlUpdate","genSaltSync","deleteUser","sqlDelete","log","login","sqlLogin","connectId","indexOf","sendCode","sqlEmailUser","code","Math","floor","random","toString","sqlChangeCode","checkCode","sqlCheckCode","deleteCode","sqlDeleteCode","resetPassword","sqlResetPassword"],"mappings":"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","file":"UserRepository.js","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport clt from \"../core/config/database\";\r\n\r\nconst repository = {};\r\n\r\n/**\r\n * @param id_user int\r\n */\r\nrepository.getUser = async (id_user) => {\r\n    let sqlGetUser = \"SELECT * FROM _user as u WHERE u.id_user = $1::int\";\r\n    try {\r\n        var result = await clt.query(sqlGetUser, [id_user]);\r\n\r\n        if (result.rows[0]) {\r\n            return result.rows[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nrepository.register = async (body) => {\r\n    let res;\r\n    let sqlExist = \"SELECT * FROM _user u WHERE u.username = $1::varchar\";\r\n    try {\r\n        var result = await clt.query(sqlExist, [body.username]);\r\n        if (result.rows.length > 0) {\r\n            res = 409;\r\n        } else {\r\n            let birth_to_datetime = new Date(body.birthdate);\r\n\r\n            let sqlRegister = \"INSERT INTO _user (email, password, firstname, lastname, phonenumber, birthdate, username, signeddate) VALUES($1, $2, $3, $4, $5, $6, $7, $8)\";\r\n            await clt.query(sqlRegister, [body.email, bcrypt.hashSync(body.password, 10), body.firstname, body.lastname, body.phonenumber, birth_to_datetime, body.username, new Date()])\r\n            res = 201;\r\n        }\r\n        return res;\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nrepository.checkEmail = async (email) => {\r\n    let res;\r\n    let sqlExistEmail = \"SELECT * FROM _user u WHERE u.email = $1\";\r\n    try {\r\n        var result = await clt.query(sqlExistEmail, [email])\r\n        if (result.rows.length > 0) {\r\n            res = 409;\r\n        } else {\r\n            res = 200;\r\n        }\r\n        return res;\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nrepository.updateUser = async (id_user, body) => {\r\n    let res;\r\n    let birth_to_datetime = new Date(body.birthdate);\r\n    let sqlUpdate = \"UPDATE _user SET firstname = $1::varchar, lastname = $2::varchar, username = $3::varchar, email = $4::varchar, birthdate = $5::date, phonenumber = $6::varchar, password = $7::varchar  WHERE id_user = $8::int\";\r\n    try {\r\n        await clt.query(sqlUpdate, [body.firstname, body.lastname, body.username, body.email, birth_to_datetime, body.phonenumber, bcrypt.hashSync(body.password, bcrypt.genSaltSync(10)), id_user]);\r\n        res = 200;\r\n    } catch (error) {\r\n        console.error(error)\r\n        res = 501;\r\n    }\r\n    return res;\r\n}\r\n\r\nrepository.deleteUser = async (id_user) => {\r\n\r\n    let sqlDelete = \"DELETE FROM _user as u WHERE u.id_user = $1::int\";\r\n    try {\r\n        await clt.query(sqlDelete, [id_user])\r\n        return 200;\r\n    } catch (error) {\r\n        console.log(error);\r\n        return 501;\r\n    }\r\n}\r\n\r\nrepository.login = async (body) => {\r\n    let sqlLogin;\r\n\r\n    if (body.connectId.indexOf('@') != -1) {\r\n        sqlLogin = \"SELECT * FROM _user as u WHERE u.email = $1::varchar \";\r\n    } else {\r\n        sqlLogin = \"SELECT * FROM _user as u WHERE u.username = $1::varchar \";\r\n    }\r\n    try {\r\n        return (await clt.query(sqlLogin, [body.connectId]));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}\r\n\r\nrepository.sendCode = async (email) => {\r\n    try {\r\n        let sqlEmailUser = \"SELECT * FROM _user as u WHERE u.email = $1::varchar \";\r\n        let result = await clt.query(sqlEmailUser, [email])\r\n        if (result.rows.length != 0) {\r\n            let code = \"\";\r\n            while (code.length < 8) {\r\n                code += Math.floor(Math.random() * 9 + 1).toString();\r\n            }\r\n            let sqlChangeCode = \"UPDATE _user SET recoverycode = $1::varchar WHERE id_user = $2::int\"\r\n            await clt.query(sqlChangeCode, [code, result.rows[0].id_user]);\r\n            return code;\r\n        } else {\r\n            return 404;\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nrepository.checkCode = async (body) => {\r\n    let sqlCheckCode = \"SELECT * FROM _user WHERE email = $1::varchar AND recoverycode = $2::varchar\";\r\n    return await clt.query(sqlCheckCode, [body.email, body.code]);\r\n}\r\n\r\nrepository.deleteCode = async (body) => {\r\n    let sqlDeleteCode = \"UPDATE _user SET recoverycode = NULL WHERE email = $1::varchar\";\r\n    try {\r\n        await clt.query(sqlDeleteCode, [body.email]);\r\n        return 200;\r\n    } catch (error) {\r\n        console.log(error);\r\n        return error;\r\n    }\r\n}\r\n\r\nrepository.resetPassword = async (body) => {\r\n    let sqlResetPassword = \"UPDATE _user SET password = $1::varchar WHERE email = $2::varchar\";\r\n    try {\r\n        return await clt.query(sqlResetPassword, [bcrypt.hashSync(body.password, 10), body.email]);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default repository;"]}