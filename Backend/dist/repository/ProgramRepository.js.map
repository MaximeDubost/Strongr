{"version":3,"sources":["../../src/repository/ProgramRepository.js"],"names":["repository","readProgram","req","program_list","sql","clt","query","user","id","result","rowCount","rows","forEach","row","push","Program","id_program","name","program_goal_name","session_count","tonnage","console","log","readDetailProgram","program_sql","params","program_goal_result","program_goal","readSessionDetailProgram","addProgram","sqlAddProgram","body","id_program_goal","Date","sqlLastProgramCreated","getIdProgram","sessions","session","parsed_session","JSON","parse","insertInProgramSession","place","deleteProgram","updateProgram","session_parsed"],"mappings":"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","file":"ProgramRepository.js","sourcesContent":["import Program from \"../Models/Program\"\r\nimport clt from \"../core/config/database\";\r\n\r\nconst repository = {};\r\n\r\nrepository.readProgram = async (req) => {\r\n    let program_list = []\r\n    let sql = `\r\n        SELECT p.id_program, p.name, pg.name as program_goal_name, COUNT(ps.id_program) as session_count, null as tonnage\r\n        FROM _program p\r\n        JOIN _program_goal pg ON pg.id_program_goal = p.id_program_goal\r\n        JOIN _program_session ps ON ps.id_program = p.id_program\r\n        WHERE p.id_user = $1 \r\n        GROUP BY p.id_program, p.name, pg.name, p.last_update\r\n        ORDER BY p.last_update DESC\r\n    `\r\n    try {\r\n        var result = await clt.query(sql, [req.user.id])\r\n        if (result.rowCount > 0) {\r\n            result.rows.forEach((row) => {\r\n                program_list.push(new Program(row.id_program, row.name, row.program_goal_name, row.session_count, row.tonnage))\r\n            })\r\n        }\r\n        console.log(program_list)\r\n        return program_list\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n}\r\n\r\nrepository.readDetailProgram = async (req) => {\r\n\r\n    //console.log('req user id = '+req.user.id)\r\n    //console.log('id_program = '+req.params.id_program)\r\n\r\n    let sql = `\r\n    SELECT p.id_program as id, p.name, p.creation_date, p.last_update\r\n    FROM _program p\r\n    JOIN _program_session ps ON ps.id_program = p.id_program\r\n    WHERE p.id_user = $1 AND p.id_program = $2\r\n    GROUP BY p.id_program, p.name, p.creation_date, p.last_update\r\n    `\r\n\r\n    let program_sql = `\r\n    SELECT pg.id_program_goal as id, pg.name as name\r\n    FROM _program p\r\n    JOIN _program_goal pg ON pg.id_program_goal = p.id_program_goal\r\n    JOIN _program_session ps ON ps.id_program = p.id_program\r\n    WHERE p.id_user = $1 AND p.id_program = $2\r\n    GROUP BY pg.name, pg.id_program_goal\r\n    `\r\n    try {\r\n        var result = await clt.query(sql, [req.user.id, req.params.id_program])\r\n        var program_goal_result = await clt.query(program_sql, [req.user.id, req.params.id_program])\r\n        result.rows[0].program_goal = program_goal_result.rows[0]\r\n        return result.rows[0]\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n\r\n}\r\n\r\nrepository.readSessionDetailProgram = async (req) => {\r\n\r\n    let sql = `\r\n    SELECT s.id_session as id, ps.place, s.name, st.name as session_type_name,  \r\n    (\r\n        SELECT COUNT(se.id_session) as exercise_count  \r\n        FROM _session s\r\n        JOIN _session_exercise se ON se.id_session = s.id_session\r\n\t\tJOIN _program_session ps ON ps.id_session = s.id_session\r\n        WHERE s.id_user = $1 AND ps.id_program = $2\r\n    ),  null as tonnage\r\n    FROM _session s\r\n    JOIN _session_type st ON st.id_session_type = s.id_session_type\r\n\tJOIN _program_session ps ON ps.id_session = s.id_session\r\n    WHERE s.id_user = $1 AND ps.id_program = $2\r\n    ORDER BY place\r\n    `\r\n    try {\r\n        var result = await clt.query(sql, [req.user.id, req.params.id_program])\r\n        return result.rows\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nrepository.addProgram = async (req) => {\r\n    let sqlAddProgram = \"INSERT INTO _program (id_user, id_program_goal, name, creation_date, last_update) VALUES ($1, $2, $3, $4, $5)\"\r\n    try {\r\n        await clt.query(sqlAddProgram, [req.user.id, req.body.id_program_goal, req.body.name, new Date(), new Date()])\r\n        let sqlLastProgramCreated = \"SELECT id_program FROM _program WHERE id_user = $1 ORDER BY creation_date DESC\"\r\n        let getIdProgram = await clt.query(sqlLastProgramCreated, [req.user.id])\r\n        req.body.sessions.forEach(async session => {\r\n            let parsed_session = JSON.parse(session)\r\n            let insertInProgramSession = \"INSERT INTO _program_session (id_user, id_user_1, id_program, id_session, place) VALUES ($1, $2, $3, $4, $5)\"\r\n            await clt.query(insertInProgramSession, [req.user.id, req.user.id, getIdProgram.rows[0].id_program, parsed_session.id, parsed_session.place])\r\n        })\r\n        return 201\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nrepository.deleteProgram = async (req) => {\r\n    let sqlAddProgram = \"DELETE FROM _program WHERE id_program = $1 AND id_user = $2\"\r\n    try {\r\n        await clt.query(sqlAddProgram, [req.params.id_program, req.user.id])\r\n        return 200\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nrepository.updateProgram = async (req) => {\r\n    console.log(req.body)\r\n    let sql = \"SELECT id_program_goal FROM _program_goal WHERE name = $1\";\r\n    try {\r\n        let result = await clt.query(sql, [req.body.program_goal_name])\r\n        sql = \"UPDATE _program SET name = $1, last_update = $2, id_program_goal = $3 WHERE id_program = $4 AND id_user = $5\"\r\n        await clt.query(sql, [req.body.name, new Date(), result.rows[0].id_program_goal, req.params.id_program, req.user.id])\r\n        sql = \"DELETE FROM _program_session WHERE id_user = $1 AND id_user_1 = $2 AND id_program = $3\"\r\n        await clt.query(sql, [req.user.id, req.user.id, req.params.id_program])\r\n        req.body.sessions.forEach(async session => {\r\n            let session_parsed = JSON.parse(session)\r\n            sql = \"INSERT INTO _program_session (id_user, id_user_1, id_program, id_session, place) VALUES ($1,$2,$3,$4,$5)\"\r\n            await clt.query(sql, [req.user.id, req.user.id, req.params.id_program, session_parsed.id, session_parsed.place])\r\n        })\r\n        return 200\r\n    } catch (error) {\r\n        console.log(error)\r\n        return 501\r\n    }\r\n}\r\n\r\n\r\nexport default repository;"]}