{"version":3,"sources":["../../src/repository/ProgramGoalRepository.js"],"names":["repository","readProgramGoal","req","program_goal_list","sql","clt","query","result","rowCount","rows","forEach","row","push","ProgramGoal","id_program_goal","name","description","console","log","readProgramGoalById","params"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAMA,aAAa,EAAnB;;AAGAA,WAAWC,eAAX;AAAA,uEAA6B,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBC,yCADqB,GACD,EADC;AAErBC,2BAFqB;AAAA;AAAA;AAAA,+BAOFC,mBAAIC,KAAJ,CAAUF,GAAV,CAPE;;AAAA;AAOjBG,8BAPiB;;AAQrB,4BAAIA,OAAOC,QAAP,GAAkB,CAAtB,EAAyB;AACrBD,mCAAOE,IAAP,CAAYC,OAAZ,CAAoB,UAACC,GAAD,EAAS;AACzBR,kDAAkBS,IAAlB,CAAuB,IAAIC,qBAAJ,CAAgBF,IAAIG,eAApB,EAAqCH,IAAII,IAAzC,EAA+CJ,IAAIK,WAAnD,CAAvB;AACH,6BAFD;AAGH;AACDC,gCAAQC,GAAR,CAAYf,iBAAZ;AAbqB,yDAcdA,iBAdc;;AAAA;AAAA;AAAA;;AAgBrBc,gCAAQC,GAAR;;AAhBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7B;;AAAA;AAAA;AAAA;AAAA;;AAqBAlB,WAAWmB,mBAAX;AAAA,wEAAiC,kBAAOjB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBE,2BADyB;AAAA;AAAA;AAAA,+BAONC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIkB,MAAJ,CAAWN,eAAZ,CAAf,CAPM;;AAAA;AAOrBP,8BAPqB;AAAA,0DAQlBA,OAAOE,IAAP,CAAY,CAAZ,CARkB;;AAAA;AAAA;AAAA;;AAUzBQ,gCAAQC,GAAR;;AAVyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjC;;AAAA;AAAA;AAAA;AAAA;;kBAgBelB,U","file":"ProgramGoalRepository.js","sourcesContent":["import ProgramGoal from \"../Models/ProgramGoal\"\r\nimport clt from \"../core/config/database\";\r\n\r\nconst repository = {};\r\n\r\n\r\nrepository.readProgramGoal = async (req) => {\r\n    let program_goal_list = []\r\n    let sql = `\r\n        SELECT id_program_goal, name, description\r\n        FROM _program_goal\r\n    `\r\n    try {\r\n        var result = await clt.query(sql)\r\n        if (result.rowCount > 0) {\r\n            result.rows.forEach((row) => {\r\n                program_goal_list.push(new ProgramGoal(row.id_program_goal, row.name, row.description))\r\n            })\r\n        }\r\n        console.log(program_goal_list)\r\n        return program_goal_list\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n}\r\n\r\nrepository.readProgramGoalById = async (req) => {\r\n    let sql = `\r\n        SELECT id_program_goal, name, description\r\n        FROM _program_goal\r\n        WHERE id_program_goal = $1\r\n    `\r\n    try {\r\n        let result = await clt.query(sql, [req.params.id_program_goal]);\r\n        return result.rows[0];\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default repository;"]}