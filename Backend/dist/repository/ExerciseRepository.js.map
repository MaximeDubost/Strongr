{"version":3,"sources":["../../src/repository/ExerciseRepository.js"],"names":["repository","createExercise","req","console","log","body","date","Date","sqlCreateExercise","sqlGetIdExercise","clt","query","id_app_exercise","user","id","name","id_equipment","result","sets","forEach","set","parsed_set","JSON","parse","sqlAddSet","rows","id_exercise","repetitions_count","rest_time","place","error","readExercises","exercise_list","sqlReadAllExercices","rowCount","row","push","Exercise","name_exercise","name_app_exercise","set_count","tonnage","updateExercise","sql","params","deleteExercise","sqlDeleteExercise","detailExercise","equipment","set_list","Set","id_set","app_exercise","AppExercise","result_equipment","Equipment","DetailExercise","creation_date","last_update","deleteExerciseAll","sqlGetSession","sqlGetAllExerciseFromSession","sqlGetProgram","sqlGetAllSessionFromProgram","sqlDeleteSessionExercise","sqlDeleteProgramSession","sqlDeleteSession","sqlDeleteProgram","resultForIdSession","allSession","id_session","resultAnyExercise","allExercise","length","resultForIdProgram","selectIdSession","r","id_program","resultAnySession","session"],"mappings":"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","file":"ExerciseRepository.js","sourcesContent":["import AppExercise from \"../Models/AppExercise\"\r\nimport Exercise from \"../Models/Exercise\"\r\nimport Set from \"../Models/Set\"\r\nimport DetailExercise from \"../Models/DetailExercise\"\r\nimport clt from \"../core/config/database\";\r\nimport { json } from \"express\";\r\nimport Equipment from \"../Models/Equipment\";\r\n\r\nconst repository = {};\r\n\r\n/**\r\n * create exercises \r\n */\r\nrepository.createExercise = async (req) => {\r\n    console.log(req.body)\r\n    let date = new Date();\r\n    let sqlCreateExercise = \"INSERT INTO _exercise (id_app_exercise, id_user, name, id_equipment, creation_date, last_update) VALUES ($1, $2, $3, $4, $5, $6)\"\r\n    let sqlGetIdExercise = \"SELECT id_exercise FROM _exercise WHERE id_user = $1 ORDER BY creation_date DESC LIMIT 1\"\r\n    try {\r\n        await clt.query(sqlCreateExercise, [req.body.id_app_exercise, req.user.id, req.body.name, req.body.id_equipment, date, date])\r\n        let result = await clt.query(sqlGetIdExercise, [req.user.id])\r\n\r\n        req.body.sets.forEach(async set => {\r\n            let parsed_set = JSON.parse(set)\r\n            let sqlAddSet = `INSERT INTO _set (id_app_exercise, id_user, id_exercise, repetitions_count, rest_time, place) VALUES ($1, $2, $3, $4, $5, $6)`\r\n            await clt.query(sqlAddSet, [req.body.id_app_exercise, req.user.id, result.rows[0].id_exercise, parsed_set.repetitions_count, parsed_set.rest_time, parsed_set.place])\r\n        })\r\n        return 201;\r\n    }\r\n    catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n/// READ\r\nrepository.readExercises = async (req) => {\r\n    let exercise_list = []\r\n    let sqlReadAllExercices = `\r\n    SELECT e.id_exercise, e.name as name_exercise, ae.name as name_app_exercise, COUNT(s.id_set) as set_count, null as tonnage\r\n    FROM _exercise e\r\n    JOIN _app_exercise ae ON ae.id_app_exercise = e.id_app_exercise\r\n    JOIN _set s ON s.id_exercise = e.id_exercise\r\n    WHERE e.id_user = $1\r\n    GROUP BY e.id_exercise, e.name, ae.name, e.last_update\r\n    ORDER BY e.last_update DESC\r\n    `\r\n    try {\r\n        var result = await clt.query(sqlReadAllExercices, [req.user.id])\r\n        if (result.rowCount > 0) {\r\n            result.rows.forEach((row) => {\r\n                exercise_list.push(new Exercise(row.id_exercise, row.name_exercise, row.name_app_exercise, row.set_count, row.tonnage))\r\n            })\r\n        }\r\n\r\n        return exercise_list\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n\r\n}\r\n\r\n/// UPDATE\r\nrepository.updateExercise = async (req) => {\r\n    let sql = \"UPDATE _exercise SET name = $1, last_update = $2, id_equipment = $3 WHERE id_exercise = $4 AND id_user = $5\"\r\n    try {\r\n        await clt.query(sql, [req.body.name, new Date(), req.body.id_equipment, req.params.id_exercise, req.user.id])\r\n        sql = \"DELETE FROM _set WHERE id_user = $1 AND id_exercise = $2\"\r\n        await clt.query(sql, [req.user.id, req.params.id_exercise])\r\n        sql = \"SELECT id_app_exercise FROM _exercise WHERE id_exercise = $1\";\r\n        let result = await clt.query(sql, [req.params.id_exercise]);\r\n        req.body.sets.forEach(async set => {\r\n            let parsed_set = JSON.parse(set);\r\n            sql = \"INSERT INTO _set (id_user, id_exercise, id_app_exercise, place, repetitions_count, rest_time) VALUES ($1,$2,$3,$4,$5,$6)\"\r\n            await clt.query(sql, [req.user.id, req.params.id_exercise, result.rows[0].id_app_exercise, parsed_set.place, parsed_set.repetitions_count, parsed_set.rest_time])\r\n        })\r\n        return 200\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n/// DELETE\r\nrepository.deleteExercise = async (req) => {\r\n    let sqlDeleteExercise = \"DELETE FROM _exercise WHERE id_exercise = $1 AND id_user = $2\"\r\n    try {\r\n        await clt.query(sqlDeleteExercise, [req.params.id_exercise, req.user.id])\r\n        return 200\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nrepository.detailExercise = async (req) => {\r\n    let equipment = []\r\n    let set_list = []\r\n    let sql = `\r\n    SELECT id_set, place, repetitions_count, rest_time, null as tonnage\r\n    FROM _set s \r\n    WHERE s.id_exercise = $1\r\n    ORDER BY s.place;\r\n    `\r\n    try {\r\n\r\n        let result = await clt.query(sql, [req.params.id_exercise])\r\n        if (result.rowCount > 0) {\r\n            result.rows.forEach(row => {\r\n                set_list.push(new Set(row.id_set, row.place, row.repetitions_count, row.rest_time, row.tonnage))\r\n            })\r\n        }\r\n        sql = `\r\n        SELECT e.id_exercise, e.name as name_exercise, ae.id_app_exercise, ae.name as name_app_exercise, e.creation_date, e.last_update\r\n        FROM _exercise e\r\n        JOIN _app_exercise ae ON ae.id_app_exercise = e.id_app_exercise\r\n        WHERE e.id_exercise = $1;\r\n        `\r\n        result = await clt.query(sql, [req.params.id_exercise])\r\n        // console.log(\"result.rows: \", result.rows)\r\n        let app_exercise = new AppExercise(result.rows[0].id_app_exercise, result.rows[0].name_app_exercise)\r\n        // console.log(\"app_exercise: \", app_exercise)\r\n        sql = `\r\n        SELECT eq.id_equipment, eq.name \r\n        FROM _exercise e JOIN _equipment eq ON eq.id_equipment = e.id_equipment\r\n        WHERE e.id_exercise = $1 AND e.id_user = $2 AND e.id_app_exercise = $3\r\n        `\r\n        let result_equipment = await clt.query(sql, [req.params.id_exercise, req.user.id, result.rows[0].id_app_exercise])\r\n        console.log(result_equipment)\r\n\r\n        if (result_equipment.rowCount > 0) {\r\n            equipment = new Equipment(result_equipment.rows[0].id_equipment, result_equipment.rows[0].name)\r\n        }\r\n\r\n        return new DetailExercise(result.rows[0].id_exercise, result.rows[0].name_exercise, app_exercise, equipment, set_list, result.rows[0].creation_date, result.rows[0].last_update)\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n\r\n\r\nrepository.deleteExerciseAll = async (req) => {\r\n    let sqlGetSession = `\r\n    SELECT id_session FROM _session_exercise WHERE id_exercise = $1 AND id_user = $2\r\n    `\r\n\r\n    let sqlGetAllExerciseFromSession = `\r\n    SELECT id_exercise FROM _session_exercise WHERE id_session = $1 AND id_user = $2\r\n    `\r\n\r\n    let sqlGetProgram = `\r\n    SELECT id_program FROM _program_session WHERE id_session = $1 and id_user = $2\r\n    `\r\n\r\n    let sqlGetAllSessionFromProgram = `\r\n    SELECT id_session FROM _program_session WHERE id_program = $1 AND id_user = $2\r\n    `\r\n\r\n    let sqlDeleteSessionExercise = `\r\n    DELETE FROM _session_exercise WHERE id_exercise = $1 AND id_user = $2\r\n    `\r\n\r\n    let sqlDeleteProgramSession = `\r\n    DELETE FROM _program_session WHERE id_session = $1 AND id_user = $2\r\n    `\r\n\r\n    let sqlDeleteExercise = `\r\n    DELETE FROM _exercise WHERE id_exercise = $1 AND id_user = $2\r\n    `\r\n\r\n    let sqlDeleteSession = `\r\n    DELETE FROM _session WHERE id_session = $1 AND id_user = $2\r\n    `\r\n\r\n    let sqlDeleteProgram = `\r\n    DELETE FROM _program WHERE id_program = $1 AND id_user = $2\r\n    `\r\n\r\n    try {\r\n        // get session dans lequel id_exercise present\r\n        let resultForIdSession = await clt.query(sqlGetSession, [req.params.id_exercise, req.user.id])\r\n        let allSession\r\n        console.log(\"resultForIdSession : \"+resultForIdSession)\r\n        if(resultForIdSession.rowCount == 0)\r\n        {\r\n            await clt.query(sqlDeleteExercise, [req.params.id_exercise, req.user.id])\r\n        }\r\n        else{\r\n            allSession = resultForIdSession.rows[0].id_session\r\n        }\r\n        // Pour chaque session \r\n        resultForIdSession.rows.forEach(async row => {\r\n            // get exercice de chaque session \r\n            let resultAnyExercise = await clt.query(sqlGetAllExerciseFromSession, [row.id_session, req.user.id])\r\n            let allExercise = resultAnyExercise.rows\r\n            // si session a plus d'un exercice\r\n            if (allExercise.length > 1) { // fonction\r\n                await clt.query(sqlDeleteSessionExercise, [req.params.id_exercise, req.user.id])\r\n                await clt.query(sqlDeleteExercise, [req.params.id_exercise, req.user.id])\r\n            } else {\r\n                // si session a un seul exercice \r\n                // get program dans lequel cette session est presente \r\n                let resultForIdProgram = await clt.query(sqlGetProgram, [row.id_session, req.user.id])\r\n                let selectIdSession = row.id_session\r\n                // si la seance n'appartient à aucun programme \r\n                if (resultForIdProgram.rowCount == 0) {\r\n                    await clt.query(sqlDeleteSessionExercise, [req.params.id_exercise, req.user.id])\r\n                    await clt.query(sqlDeleteProgramSession, [selectIdSession, req.user.id])\r\n                    await clt.query(sqlDeleteExercise, [req.params.id_exercise, req.user.id])\r\n                    await clt.query(sqlDeleteSession, [selectIdSession, req.user.id])\r\n                }\r\n                resultForIdProgram.rows.forEach(async r => {\r\n                    // get toutes sessions de chaque programme dans lequel la session existe  \r\n                    let resultAnySession = await clt.query(sqlGetAllSessionFromProgram, [r.id_program, req.user.id])\r\n                    let allSession = resultAnySession.rows\r\n                    // si session n'est pas unique dans chaque programme \r\n                    if (allSession.length > 1) {\r\n                        allSession.forEach(async session => { // NON TESTE POUR L'INSTANT\r\n                            await clt.query(sqlDeleteSessionExercise, [allExercise[0].id_exercise, req.user.id])\r\n                            await clt.query(sqlDeleteProgramSession, [selectIdSession, req.user.id])\r\n                            await clt.query(sqlDeleteExercise, [allExercise[0].id_exercise, req.user.id])\r\n                            await clt.query(sqlDeleteSession, [selectIdSession, req.user.id])\r\n                        })\r\n                    } else { // si session unique dans programme \r\n                        await clt.query(sqlDeleteSessionExercise, [req.params.id_exercise, req.user.id])\r\n                        await clt.query(sqlDeleteProgramSession, [allSession[0].id_session, req.user.id])\r\n                        await clt.query(sqlDeleteExercise, [req.params.id_exercise, req.user.id])\r\n                        await clt.query(sqlDeleteSession, [allSession[0].id_session, req.user.id])\r\n                        await clt.query(sqlDeleteProgram, [r.id_program, req.user.id])\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return 201;\r\n    }\r\n    catch (error) {\r\n        console.error(error)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default repository;"]}