{"version":3,"sources":["../../src/repository/SessionRepository.js"],"names":["repository","getSessions","req","sessionList","sql","clt","query","user","id","result","console","log","rowCount","rows","map","push","Session","row","id_session","name_session","session_type_name","exercise_count","tonnage","getSessionDetail","exercises_list","params","resultSessionType","sessionType","SessionType","id_session_type","resultExercises","exercise","ExerciseSession","id_exercise","place","name_exercise","app_exercise_name","set_count","data","SessionDetail","session_name","creation_date","last_update","addSession","sqlAddSession","body","name","Date","sqlGetLastSessionCreated","getIdSession","exercises","forEach","parsed_exercise","JSON","parse","sqlGetIdAppExercise","getIdAppExercise","insertInSessionExercise","id_app_exercise","deleteSession","sqlDeleteSession","updateSession","exercises_parsed","appExerciseName"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAEA,IAAMA,aAAa,EAAnB;;AAEAA,WAAWC,WAAX;AAAA,uEAAyB,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,mCADiB,GACH,EADG;AAEjBC,2BAFiB;AAAA;AAAA;AAAA,+BAYEC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIK,IAAJ,CAASC,EAAV,CAAf,CAZF;;AAAA;AAYbC,8BAZa;;AAajBC,gCAAQC,GAAR,CAAYF,MAAZ;AACA,4BAAIA,OAAOG,QAAP,IAAmB,CAAvB,EAA0B;AACtBH,mCAAOI,IAAP,CAAYC,GAAZ,CAAgB,eAAO;AACnBX,4CAAYY,IAAZ,CAAiB,IAAIC,iBAAJ,CAAYC,IAAIC,UAAhB,EAA4BD,IAAIE,YAAhC,EAA8CF,IAAIG,iBAAlD,EAAqEH,IAAII,cAAzE,EAAyFJ,IAAIK,OAA7F,CAAjB;AACH,6BAFD;AAGH;AAlBgB,yDAmBVnB,WAnBU;;AAAA;AAAA;AAAA;;AAqBjBO,gCAAQC,GAAR;;AArBiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAzB;;AAAA;AAAA;AAAA;AAAA;;AAyBAX,WAAWuB,gBAAX;AAAA,wEAA8B,kBAAOrB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBsB,sCADsB,GACL,EADK;AAEtBpB,2BAFsB;AAAA;AAAA;AAAA,+BAUQC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIK,IAAJ,CAASC,EAAV,EAAcN,IAAIuB,MAAJ,CAAWP,UAAzB,CAAf,CAVR;;AAAA;AAUlBQ,yCAVkB;AAYlBC,mCAZkB,GAYJ,IAAIC,qBAAJ,CAAgBF,kBAAkBb,IAAlB,CAAuB,CAAvB,EAA0BgB,eAA1C,EAA2DH,kBAAkBb,IAAlB,CAAuB,CAAvB,EAA0BO,iBAArF,CAZI;;;AActBhB;AAdsB;AAAA,+BAyBMC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIK,IAAJ,CAASC,EAAV,EAAcN,IAAIuB,MAAJ,CAAWP,UAAzB,CAAf,CAzBN;;AAAA;AAyBlBY,uCAzBkB;;AA0BtB,4BAAIA,gBAAgBlB,QAAhB,GAA2B,CAA/B,EAAkC;AAC9BkB,4CAAgBjB,IAAhB,CAAqBC,GAArB,CAAyB,eAAO;AAC5BJ,wCAAQC,GAAR,CAAY,WAAWM,GAAvB;AACA,oCAAIc,WAAW,IAAIC,yBAAJ,CAAoBf,IAAIgB,WAAxB,EAAqChB,IAAIiB,KAAzC,EAAgDjB,IAAIkB,aAApD,EAAmElB,IAAImB,iBAAvE,EAA0FnB,IAAIoB,SAA9F,EAAyGpB,IAAIK,OAA7G,CAAf;AACAE,+CAAeT,IAAf,CAAoBgB,QAApB;AACH,6BAJD;AAKH;AACGO,4BAjCkB,GAiCX,IAAIC,uBAAJ,CAAkBb,kBAAkBb,IAAlB,CAAuB,CAAvB,EAA0BK,UAA5C,EAAwDQ,kBAAkBb,IAAlB,CAAuB,CAAvB,EAA0B2B,YAAlF,EAAgGb,WAAhG,EAA6GH,cAA7G,EAA6HE,kBAAkBb,IAAlB,CAAuB,CAAvB,EAA0B4B,aAAvJ,EAAsKf,kBAAkBb,IAAlB,CAAuB,CAAvB,EAA0B6B,WAAhM,CAjCW;;AAkCtBhC,gCAAQC,GAAR,CAAY2B,IAAZ;AAlCsB,0DAmCfA,IAnCe;;AAAA;AAAA;AAAA;;AAqCtB5B,gCAAQC,GAAR;AArCsB,0DAsCf,GAtCe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9B;;AAAA;AAAA;AAAA;AAAA;;AA0CAX,WAAW2C,UAAX;AAAA,wEAAwB,kBAAOzC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB;AACI0C,qCAFgB,GAEA,+GAFA;AAAA;AAAA;AAAA,+BAIVvC,mBAAIC,KAAJ,CAAUsC,aAAV,EAAyB,CAAC1C,IAAIK,IAAJ,CAASC,EAAV,EAAcN,IAAI2C,IAAJ,CAAShB,eAAvB,EAAwC3B,IAAI2C,IAAJ,CAASC,IAAjD,EAAuD,IAAIC,IAAJ,EAAvD,EAAmE,IAAIA,IAAJ,EAAnE,CAAzB,CAJU;;AAAA;AAKZC,gDALY,GAKe,gFALf;AAAA;AAAA,+BAMS3C,mBAAIC,KAAJ,CAAU0C,wBAAV,EAAoC,CAAC9C,IAAIK,IAAJ,CAASC,EAAV,CAApC,CANT;;AAAA;AAMZyC,oCANY;;AAOhB/C,4BAAI2C,IAAJ,CAASK,SAAT,CAAmBC,OAAnB;AAAA,gGAA2B,kBAAMpB,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBqB,+DADmB,GACDC,KAAKC,KAAL,CAAWvB,QAAX,CADC;AAEnBwB,mEAFmB,GAEG,8DAFH;AAAA;AAAA,uDAGMlD,mBAAIC,KAAJ,CAAUiD,mBAAV,EAA+B,CAACH,gBAAgB5C,EAAjB,CAA/B,CAHN;;AAAA;AAGnBgD,gEAHmB;AAInBC,uEAJmB,GAIO,qIAJP;AAAA;AAAA,uDAKjBpD,mBAAIC,KAAJ,CAAUmD,uBAAV,EAAmC,CAACvD,IAAIK,IAAJ,CAASC,EAAV,EAAcN,IAAIK,IAAJ,CAASC,EAAvB,EAA2ByC,aAAapC,IAAb,CAAkB,CAAlB,EAAqBK,UAAhD,EAA4DkC,gBAAgB5C,EAA5E,EAAgFgD,iBAAiB3C,IAAjB,CAAsB,CAAtB,EAAyB6C,eAAzG,EAA0HN,gBAAgBlB,KAA1I,CAAnC,CALiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA3B;;AAAA;AAAA;AAAA;AAAA;AAPgB,0DAcT,GAdS;;AAAA;AAAA;AAAA;;AAgBhBxB,gCAAQC,GAAR;AAhBgB,0DAiBT,GAjBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB;;AAAA;AAAA;AAAA;AAAA;;AAqBAX,WAAW2D,aAAX;AAAA,wEAA2B,kBAAOzD,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBQ,gCAAQC,GAAR,CAAYT,IAAI2C,IAAhB;AACIe,wCAFmB,GAEA,6DAFA;AAAA;AAAA;AAAA,+BAIbvD,mBAAIC,KAAJ,CAAUsD,gBAAV,EAA4B,CAAC1D,IAAIK,IAAJ,CAASC,EAAV,EAAcN,IAAIuB,MAAJ,CAAWP,UAAzB,CAA5B,CAJa;;AAAA;AAAA,0DAKZ,GALY;;AAAA;AAAA;AAAA;;AAOnBR,gCAAQC,GAAR;AAPmB,0DAQZ,GARY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3B;;AAAA;AAAA;AAAA;AAAA;;AAYAX,WAAW6D,aAAX;AAAA,wEAA2B,kBAAO3D,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBE,2BADmB,GACb,wFADa;AAAA;AAAA;AAAA,+BAGbC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAI2C,IAAJ,CAASC,IAAV,EAAgB,IAAIC,IAAJ,EAAhB,EAA4B7C,IAAIK,IAAJ,CAASC,EAArC,EAAyCN,IAAIuB,MAAJ,CAAWP,UAApD,CAAf,CAHa;;AAAA;AAInBd,8BAAM,yFAAN;AAJmB;AAAA,+BAKbC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIK,IAAJ,CAASC,EAAV,EAAcN,IAAIK,IAAJ,CAASC,EAAvB,EAA2BN,IAAIuB,MAAJ,CAAWP,UAAtC,CAAf,CALa;;AAAA;AAMnBd,8BAAM,gIAAN;AACAF,4BAAI2C,IAAJ,CAASK,SAAT,CAAmBC,OAAnB;AAAA,gGAA2B,kBAAMpB,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACnB+B,gEADmB,GACAT,KAAKC,KAAL,CAAWvB,QAAX,CADA;AAAA;AAAA,uDAEJ1B,mBAAIC,KAAJ,CAAU,2DAAV,EAAuE,CAACwD,iBAAiBC,eAAlB,CAAvE,CAFI;;AAAA;AAEnBtD,sDAFmB;;AAGvBC,wDAAQC,GAAR,CAAYF,MAAZ;AAHuB;AAAA,uDAIjBJ,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIK,IAAJ,CAASC,EAAV,EAAcN,IAAIK,IAAJ,CAASC,EAAvB,EAA2BN,IAAIuB,MAAJ,CAAWP,UAAtC,EAAkD4C,iBAAiBtD,EAAnE,EAAuEC,OAAOI,IAAP,CAAY,CAAZ,EAAe6C,eAAtF,EAAuGI,iBAAiB5B,KAAxH,CAAf,CAJiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA3B;;AAAA;AAAA;AAAA;AAAA;AAPmB,0DAaZ,GAbY;;AAAA;AAAA;AAAA;;AAenBxB,gCAAQC,GAAR;AAfmB,0DAgBZ,GAhBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3B;;AAAA;AAAA;AAAA;AAAA;;kBAqBeX,U","file":"SessionRepository.js","sourcesContent":["import Session from '../models/Session';\r\nimport SessionDetail from '../models/SessionDetail';\r\nimport SessionType from '../models/SessionType';\r\nimport ExerciseSession from '../models/ExerciseSession';\r\nimport clt from '../core/config/database';\r\n\r\nconst repository = {};\r\n\r\nrepository.getSessions = async (req) => {\r\n    let sessionList = []\r\n    var sql = `\r\n    SELECT s.id_session, s.name as name_session, st.name as session_type_name, COUNT(se.id_exercise) as exercise_count, null as tonnage\r\n    FROM _session s\r\n    JOIN _session_type st ON s.id_session_type = st.id_session_type\r\n    JOIN _session_exercise se ON s.id_session = se.id_session\r\n    WHERE s.id_user = $1\r\n    GROUP BY s.id_session, s.name, st.name, s.last_update\r\n    ORDER BY s.last_update DESC\r\n    `\r\n    try {\r\n        var result = await clt.query(sql, [req.user.id])\r\n        console.log(result)\r\n        if (result.rowCount != 0) {\r\n            result.rows.map(row => {\r\n                sessionList.push(new Session(row.id_session, row.name_session, row.session_type_name, row.exercise_count, row.tonnage))\r\n            })\r\n        }\r\n        return sessionList\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nrepository.getSessionDetail = async (req) => {\r\n    let exercises_list = []\r\n    let sql = `\r\n    SELECT s.id_session, st.id_session_type, se.place as place, s.name as session_name, st.name as session_type_name, s.creation_date, s.last_update\r\n    FROM _session s\r\n    JOIN _session_type st ON s.id_session_type = st.id_session_type\r\n    JOIN _session_exercise se ON s.id_session = se.id_session\r\n    WHERE s.id_user = $1 AND s.id_session = $2\r\n    `\r\n    try {\r\n        let resultSessionType = await clt.query(sql, [req.user.id, req.params.id_session])\r\n\r\n        let sessionType = new SessionType(resultSessionType.rows[0].id_session_type, resultSessionType.rows[0].session_type_name)\r\n\r\n        sql = `\r\n        SELECT e.id_exercise, se.place, e.name as name_exercise, ae.name as app_exercise_name, COUNT(sett.id_set) as set_count, null as tonnage \r\n        FROM _session s\r\n        JOIN _session_exercise se on s.id_session = se.id_session \r\n        JOIN _exercise e on se.id_exercise = e.id_exercise \r\n        JOIN _app_exercise ae on e.id_app_exercise = ae.id_app_exercise\r\n        JOIN _set sett ON e.id_exercise = sett.id_exercise\r\n        WHERE s.id_user = $1 and s.id_session = $2\r\n        GROUP BY e.id_exercise, se.place, ae.name, e.name\r\n        ORDER BY se.place;\r\n        `\r\n        let resultExercises = await clt.query(sql, [req.user.id, req.params.id_session])\r\n        if (resultExercises.rowCount > 0) {\r\n            resultExercises.rows.map(row => {\r\n                console.log(\"ROW : \" + row)\r\n                let exercise = new ExerciseSession(row.id_exercise, row.place, row.name_exercise, row.app_exercise_name, row.set_count, row.tonnage)\r\n                exercises_list.push(exercise)\r\n            })\r\n        }\r\n        let data = new SessionDetail(resultSessionType.rows[0].id_session, resultSessionType.rows[0].session_name, sessionType, exercises_list, resultSessionType.rows[0].creation_date, resultSessionType.rows[0].last_update)\r\n        console.log(data)\r\n        return data\r\n    } catch (error) {\r\n        console.log(error)\r\n        return 501\r\n    }\r\n}\r\n\r\nrepository.addSession = async (req) => {\r\n    // console.log(req.body)\r\n    let sqlAddSession = \"INSERT INTO _session (id_user, id_session_type, name, creation_date, last_update) VALUES ($1, $2, $3, $4, $5)\"\r\n    try {\r\n        await clt.query(sqlAddSession, [req.user.id, req.body.id_session_type, req.body.name, new Date(), new Date()])\r\n        let sqlGetLastSessionCreated = \"SELECT id_session FROM _session WHERE id_user = $1 ORDER BY creation_date DESC\"\r\n        let getIdSession = await clt.query(sqlGetLastSessionCreated, [req.user.id])\r\n        req.body.exercises.forEach(async exercise => {\r\n            let parsed_exercise = JSON.parse(exercise)\r\n            let sqlGetIdAppExercise = \"SELECT id_app_exercise FROM _exercise WHERE id_exercise = $1\"\r\n            let getIdAppExercise = await clt.query(sqlGetIdAppExercise, [parsed_exercise.id])\r\n            let insertInSessionExercise = \"INSERT INTO _session_exercise (id_user, id_user_1, id_session, id_exercise, id_app_exercise, place) VALUES ($1, $2, $3, $4, $5, $6)\"\r\n            await clt.query(insertInSessionExercise, [req.user.id, req.user.id, getIdSession.rows[0].id_session, parsed_exercise.id, getIdAppExercise.rows[0].id_app_exercise, parsed_exercise.place])\r\n        })\r\n        return 201\r\n    } catch (error) {\r\n        console.log(error)\r\n        return 501\r\n    }\r\n}\r\n\r\nrepository.deleteSession = async (req) => {\r\n    console.log(req.body)\r\n    var sqlDeleteSession = \"DELETE FROM _session WHERE id_user = $1 AND id_session = $2\"\r\n    try {\r\n        await clt.query(sqlDeleteSession, [req.user.id, req.params.id_session])\r\n        return 200\r\n    } catch (error) {\r\n        console.log(error)\r\n        return 501\r\n    }\r\n}\r\n\r\nrepository.updateSession = async (req) => {\r\n    let sql = \"UPDATE _session SET name = $1, last_update = $2 WHERE id_user = $3 AND id_session = $4\"\r\n    try {\r\n        await clt.query(sql, [req.body.name, new Date(), req.user.id, req.params.id_session])\r\n        sql = \"DELETE FROM _session_exercise WHERE id_user = $1 AND id_user_1 = $2 AND id_session = $3\"\r\n        await clt.query(sql, [req.user.id, req.user.id, req.params.id_session])\r\n        sql = \"INSERT INTO _session_exercise (id_user, id_user_1, id_session, id_exercise, id_app_exercise, place) VALUES ($1,$2,$3,$4,$5,$6)\"\r\n        req.body.exercises.forEach(async exercise => {\r\n            let exercises_parsed = JSON.parse(exercise)\r\n            let result = await clt.query(\"SELECT id_app_exercise FROM _app_exercise WHERE name = $1\", [exercises_parsed.appExerciseName])\r\n            console.log(result);\r\n            await clt.query(sql, [req.user.id, req.user.id, req.params.id_session, exercises_parsed.id, result.rows[0].id_app_exercise, exercises_parsed.place])\r\n        })\r\n        return 200\r\n    } catch (error) {\r\n        console.log(error)\r\n        return 501\r\n    }\r\n}\r\n\r\n\r\nexport default repository"]}