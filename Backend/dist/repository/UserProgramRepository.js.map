{"version":3,"sources":["../../src/repository/UserProgramRepository.js"],"names":["repository","createUserProgram","req","res","sql","clt","query","body","name_program","Date","id_program_goal","user","id","result","console","log","id_lastprogram","rows","id_program","id_session","getProgramsPreview","updateUserProgram","params","deleteUserProgram"],"mappings":";;;;;;AAAA;;;;;;;;AACA,IAAMA,aAAa,EAAnB;;AAGAA,WAAWC,iBAAX;AAAA,uEAA+B,iBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,2BADuB;AAEvBC,2BAFuB,GAEjB,+GAFiB;AAAA;AAAA;AAAA,+BAIJC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIK,IAAJ,CAASC,YAAV,EAAwB,IAAIC,IAAJ,EAAxB,EAAoC,IAAIA,IAAJ,EAApC,EAAgDP,IAAIK,IAAJ,CAASG,eAAzD,EAA0ER,IAAIS,IAAJ,CAASC,EAAnF,CAAf,CAJI;;AAAA;AAInBC,8BAJmB;;AAKvBC,gCAAQC,GAAR,CAAYF,MAAZ;AACAT,8BAAM,oDAAN;AANuB;AAAA,+BAORC,mBAAIC,KAAJ,CAAUF,GAAV,CAPQ;;AAAA;AAOvBS,8BAPuB;AAQnBG,sCARmB,GAQFH,OAAOI,IAAP,CAAY,CAAZ,EAAeC,UARb;;AASvBd,8BAAM,mGAAN;AATuB;AAAA,+BAUjBC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIS,IAAJ,CAASC,EAAV,EAAcI,cAAd,EAA8Bd,IAAIS,IAAJ,CAASC,EAAvC,EAA2CV,IAAIK,IAAJ,CAASY,UAApD,CAAf,CAViB;;AAAA;AAWvBhB,8BAAM,GAAN;AAXuB,yDAYhBA,GAZgB;;AAAA;AAAA;AAAA;;AAcvBW,gCAAQC,GAAR;AAduB,yDAehB,GAfgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAAA;AAAA;AAAA;AAAA;;AAmBAf,WAAWoB,kBAAX;AAAA,wEAAgC,kBAAOlB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBE,2BADwB;AAAA;AAAA;AAAA,+BAYLC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIS,IAAJ,CAASC,EAAV,CAAf,CAZK;;AAAA;AAYpBC,8BAZoB;AAAA,0DAajBA,OAAOI,IAbU;;AAAA;AAAA;AAAA;;AAexBH,gCAAQC,GAAR;AAfwB,0DAgBjB,GAhBiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;;AAAA;AAAA;AAAA;AAAA;;AAoBAf,WAAWqB,iBAAX;AAAA,wEAA+B,kBAAOnB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBE,2BADuB,GACjB,6FADiB;AAAA;AAAA;AAAA,+BAGjBC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIK,IAAJ,CAASG,eAAV,EAA2BR,IAAIK,IAAJ,CAASC,YAApC,EAAkD,IAAIC,IAAJ,EAAlD,EAA8DP,IAAIoB,MAAJ,CAAWJ,UAAzE,CAAf,CAHiB;;AAAA;AAAA,0DAIhB,GAJgB;;AAAA;AAAA;AAAA;;AAMvBJ,gCAAQC,GAAR;AANuB,0DAOhB,GAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAAA;AAAA;AAAA;AAAA;;AAWA;;;AAGAf,WAAWuB,iBAAX;AAAA,wEAA+B,kBAAOrB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBE,2BADuB,GACjB,4CADiB;AAAA;AAAA;AAAA,+BAGjBC,mBAAIC,KAAJ,CAAUF,GAAV,EAAe,CAACF,IAAIoB,MAAJ,CAAWJ,UAAZ,CAAf,CAHiB;;AAAA;AAAA,0DAIhB,GAJgB;;AAAA;AAAA;AAAA;;AAMvBJ,gCAAQC,GAAR;AANuB,0DAOhB,GAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/B;;AAAA;AAAA;AAAA;AAAA;;kBAWef,U","file":"UserProgramRepository.js","sourcesContent":["import clt from \"../core/config/database\";\r\nconst repository = {};\r\n\r\n\r\nrepository.createUserProgram = async (req) => {\r\n    let res;\r\n    let sql = \"INSERT INTO _program (name, creation_date, last_update, id_program_goal, id_user) VALUES ($1, $2, $3, $4, $5)\"\r\n    try {\r\n        let result = await clt.query(sql, [req.body.name_program, new Date(), new Date(), req.body.id_program_goal, req.user.id])\r\n        console.log(result)\r\n        sql = \"SELECT * FROM _program ORDER BY creation_date DESC\"\r\n        result = await clt.query(sql)\r\n        let id_lastprogram = result.rows[0].id_program\r\n        sql = \"INSERT INTO _program_session (id_user, id_program, id_user_1, id_session) VALUES ($1, $2, $3, $4)\"\r\n        await clt.query(sql, [req.user.id, id_lastprogram, req.user.id, req.body.id_session])\r\n        res = 201\r\n        return res\r\n    } catch (error) {\r\n        console.log(error)\r\n        return 500\r\n    }\r\n}\r\n\r\nrepository.getProgramsPreview = async (req) => {\r\n    let sql = `\r\n    SELECT p.id_program as id, p.name as name ,pg.name as program_goal,\r\n    COUNT(DISTINCT ps.id_session) as session_count, null as Tonnage\r\n    FROM _program p \r\n    JOIN _program_goal pg ON p.id_program_goal = pg.id_program_goal\r\n    JOIN _program_session ps ON p.id_program = ps.id_program\r\n    WHERE p.id_user = $1\r\n    GROUP BY p.id_program, p.name, pg.name, p.last_update\r\n    ORDER BY p.last_update DESC\r\n    `\r\n    try {\r\n        let result = await clt.query(sql, [req.user.id])\r\n        return result.rows\r\n    } catch (error) {\r\n        console.log(error)\r\n        return 500\r\n    }\r\n}\r\n\r\nrepository.updateUserProgram = async (req) => {\r\n    let sql = \"UPDATE _program SET id_program_goal = $1, name = $2, last_update = $3 WHERE id_program = $4\"\r\n    try {\r\n        await clt.query(sql, [req.body.id_program_goal, req.body.name_program, new Date(), req.params.id_program])\r\n        return 200\r\n    } catch (error) {\r\n        console.log(error)\r\n        return 500\r\n    }\r\n}\r\n\r\n/**\r\n * Trigger donc temporaire\r\n */\r\nrepository.deleteUserProgram = async (req) => {\r\n    let sql = \"DELETE FROM _program WHERE id_program = $1\"\r\n    try {\r\n        await clt.query(sql, [req.params.id_program])\r\n        return 200\r\n    } catch (error) {\r\n        console.log(error)\r\n        return 500\r\n    }\r\n}\r\n\r\nexport default repository"]}