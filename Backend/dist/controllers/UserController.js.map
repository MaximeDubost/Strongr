{"version":3,"sources":["../../src/controllers/UserController.js"],"names":["controller","transport","nodemailer","createTransport","service","secure","port","auth","user","pass","getUser","req","res","body","UserRepository","params","id_user","message","user_info","status","json","sendStatus","register","userRegistered","console","error","checkEmail","email","emailChecked","updateUser","userUpdated","deleteUser","userDeleted","login","result","rows","length","bcrypt","compareSync","password","token","jwt","sign","id","username","logout","sendCode","repositoryProcess","from","to","subject","text","sendMail","checkCode","log","deleteCode","deleteCodeRepo","resetPassword"],"mappings":"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","file":"UserController.js","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport jwt from \"jsonwebtoken\";\r\nimport nodemailer from \"nodemailer\"\r\n\r\nimport UserRepository from \"../repository/UserRepository\"\r\n\r\nconst controller = {};\r\n\r\nlet transport = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    secure: false,\r\n    port: 25,\r\n    auth: {\r\n        user: 'team.strongr',\r\n        pass: '#5tr0n63R'\r\n    }\r\n});\r\n/**\r\n * @param id_user int\r\n */\r\ncontroller.getUser = async (req, res) => {\r\n    let body = {};\r\n    let user = await UserRepository.getUser(req.params.id_user);\r\n    if (user) {\r\n        body = {\r\n            message: 'User found',\r\n            user_info: user\r\n        };\r\n        res.status(200).json(body)\r\n    } else {\r\n        res.sendStatus(404)\r\n    }\r\n}\r\n/**\r\n * @param username varchar,\r\n * @param firstname varchar,\r\n * @param lastname varchar,\r\n * @param password varchar,\r\n * @param email varchar,\r\n */\r\ncontroller.register = async (req, res) => {\r\n\r\n    try {\r\n        let userRegistered = await UserRepository.register(req.body);\r\n        res.sendStatus(userRegistered);\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n/**\r\n * @param email varchar\r\n */\r\ncontroller.checkEmail = async (req, res) => {\r\n    try {\r\n        let emailChecked = await UserRepository.checkEmail(req.body.email);\r\n        res.sendStatus(emailChecked);\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n/**\r\n * @param id_user int\r\n * @param firstname varchar,\r\n * @param lastname varchar,\r\n * @param username varchar,\r\n * @param email varchar,\r\n * @param password varchar\r\n */\r\ncontroller.updateUser = async (req, res) => {\r\n    try {\r\n        let userUpdated = await UserRepository.updateUser(req.params.id_user, req.body);\r\n        res.sendStatus(userUpdated);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n/**\r\n * @param id_user int\r\n */\r\ncontroller.deleteUser = async (req, res) => {\r\n    try {\r\n        let userDeleted = await UserRepository.deleteUser(req.params.id_user);\r\n        res.sendStatus(userDeleted);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n/**\r\n * @param email varchar,\r\n * @param password varchar\r\n */\r\ncontroller.login = async (req, res) => {\r\n\r\n    try {\r\n        let result = await UserRepository.login(req.body);\r\n        if (result.rows.length > 0) {\r\n            if (bcrypt.compareSync(req.body.password, result.rows[0].password)) {\r\n                var token = jwt.sign({\r\n                    id: result.rows[0].id_user,\r\n                    email: result.rows[0].email,\r\n                    username: result.rows[0].username\r\n                }, \"SECRET\")\r\n                res.status(200).json({ token });\r\n            } else {\r\n                res.sendStatus(401);\r\n            }\r\n        } else {\r\n            res.sendStatus(404);\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\ncontroller.logout = (req, res) => {\r\n    res.sendStatus(200);\r\n}\r\n/**\r\n * @param email\r\n */\r\ncontroller.sendCode = async (req, res) => {\r\n    try {\r\n        let repositoryProcess = await UserRepository.sendCode(req.body.email);\r\n        if (repositoryProcess != 404) {\r\n            const message = {\r\n                from: 'team.strongr@gmail.com', // Sender address\r\n                to: req.body.email,         // List of recipients\r\n                subject: 'Code de réinitialisation de mot de passe', // Subject line\r\n                text: \"Bonjour, \\n\\n Votre code est le suivant : \" + repositoryProcess + \".\\n\\n Si vous n’avez pas fait de demande pour un code, merci de contacter le service client pour vous assurer qu’il ne s’agit pas d’une tentative de fraude.\\n\\n\\n - Strongr Team\" // Plain text body\r\n            };\r\n            await transport.sendMail(message);\r\n            res.sendStatus(200);\r\n        } else {\r\n            res.sendStatus(repositoryProcess);\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n/**\r\n * @param recoverycode varchar\r\n */\r\ncontroller.checkCode = async (req, res) => {\r\n    try {\r\n        let result = await UserRepository.checkCode(req.body);\r\n        console.log(result);\r\n        if (result.rows.length != 0) {\r\n            let deleteCodeRepo = await UserRepository.deleteCode(req.body);\r\n            res.sendStatus(deleteCodeRepo);\r\n        } else {\r\n            res.sendStatus(401);\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n/**\r\n * @param email varchar,\r\n * @param password  varchar\r\n */\r\ncontroller.resetPassword = async (req, res) => {\r\n    try {\r\n        await UserRepository.resetPassword(req.body)\r\n        res.sendStatus(200)\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default controller;"]}